
1. 基础知识（变量，常量，函数，数组，字符串...）

2. msyql

3. oop

厚积而薄发


开发商城：

1. 微型框架 提高开发效率

{
	数据库类
	配置文件
	Model层
	日志功能	
}

日志功能： 是指运行的sql语句。
已经错误的记录，要能记录到日志文件里.（知识点：文件操作）

2. 后台 栏目管理+商品管理

无限级栏目：
(知识点：递归)


3. 商品管理
功能要求：上传商品 + 处理商品图片
（知识点：文件上传 + GD库）

4. 前台用户登陆
功能要求：登陆，注册，记住用户名
(知识点：session + cookie)


5. 下订单
功能要求：购物车 + 订单功能
(知识点：面向对象 + 单例做购物车)

6. 在线支付订单
(知识点：在线支付)


----------

关于日志Log Class.

必须下次刷新，才会备份， 重新建一个curr.log

缓存
PHP.exe 开启进程 PID 111 start
5000次读取
PHP.exe 结束进程 PID 111 end

PHP.exe 开启进程 PID 112 start 
5000次读取
PHP.exe 结束进程 PID 112 end

PHP.exe 开启进程
5000次读取
PHP.exe 结束进程

在1次的进程中，filesize(); 的结果会被缓存。(很多文件信息获取函数的结果，都会被缓存，如filemtime);


# MVC

controller 负责响应用户，调度Model/View 不负责SQL和样式
model 操作数据库 不针对数据的合法，如$_GET做检验
view 一般没含逻辑，只负责输出



# 防非法访问

	做一个常量，防止跳墙. 
	define('ACC', true);


# ECSHOP `goods` 表字段含义

goods_id 商品ID
cat_id 分类ID  标记商品属于那个栏目
goods_sn 商品序列号
goods_name 商品名称
click_count 点击量
brand_id 所属的品牌
provider_name 供货商
goods_number 商品库存量
goods_weight 商品重量(kg)
market_price 市场价
shop_price 本店价
promote_price 促销价，优惠价
promote_start_date 优惠开始日期
promote_end_date 优惠结束日期
warn_number 商品少到多少的时候
keywords 关键字
goods_brief 简短描述
goods_desc 详细描述
goods_thumb 
goods_img
original_img 
is_real 是否是实体商品
extension_code 
is_on_sale 是否在销售状态
is_alone_sale 是否单卖
is_shipping 是否包邮
integral
add_time 发布时间
sort_order 排序
is_best   
is_new
is_hot

last_update 上次修改时间
goods_type 商品类型
seller_note 买家备注
give_integral 积分


# 回收站

`update`

为什么商品不直接删除，而是标记删除或逻辑删除

1. 破坏了数据的完整性.
2. 影响查询的速度(对于大型网站), 影响索引，影响速度.


# 图片处理类

完成图片处理类，并生成商品图片的缩略图

商品货号 
详细描述，编辑器功能


# 插入数据库

source E:/goods-cate.sql


# 读取新品

`where is_new=1`

判断子孙树 取出栏目下的对应商品.`cat_id`


# 用户登陆

session - cookie

# cookie记住用户名
写cookie到浏览器.

# 购物车类的开发

```
	// 购物车特性：
	// 1. 无论在当前网站刷新了多少次页面，或者新增了多少个商品，都要求查看购物车时，看到的都是一样的结果. 即：打开A商品所在的页面刷新，B商品所在的页面刷新. 还是首页，看到的购物车应该是一样的. 
	// 或者说：整站范围内，购物车 -- 是全局有效的.
	
	// 解决：把购物车放在数据库中或者放入session中.
	
	// 2. 既然是全局有效， 暗示，购物车的实例只能有一个.
	// 不能说在3个页面，买了3个商品，就形成了3个购物车的实例，这是不合理的.
	
	// 解决：单例模式
	
	// session + 单例模式  实现购物车.
	
	
	/**
	 * 功能分析：
	 * 
	 * 判断商品是否存在
	 * 添加商品
	 * 删除商品
	 * 修改商品的数量
	 *
	 * 某商品数量加1
	 * 某商品数量减1
	 *  
	 * 查询购物车的商品种类
	 * 查询购物车的商品数量
	 * 查询购物车里的商品总金额
	 * 返回购物车的所有商品
	 * 清空购物车
	 */
```


# 下订单

> 订单展示

设计 两张表， `orderinfo` 与 `ordergoods`.

判断商品是否能够购买(在回收站或已经下架状态)

可以购买的情况下加入购物车

判断加入购物车的商品是否库存足够.

库存不足的清空，需要移除当前的 购物车中的商品


从session 中取出购物车商品

处理价格展示添加到`结算页面`


> 订单入库

判断是否全部商品是否能够下订单成功
如果成功减少库存，清空购物车


# 分页类

```
	/**
	 * 商品数据 共 5 条 ， 每页 显示 2条
	 * 
	 * 共几页?
	 * 共3页， 因为页数是整的.
	 * 
	 * 第一页显示第几条到第几条?
	 * 1-2 条 
	 * 
	 * 第二页显示第几条到第几条?
	 * 3-4 条
	 *
	 *  // ------
	 * 
	 * 分页原理的三个变量：
	 * 总条目 $total
	 * 每页条数 $perpage
	 * 当前页  $page
	 * 
	 * 分页原理2个公式：
	 * 总页数 $cnt = ceil($total / $perpage);
	 * 
	 * 第 $page页 ， 显示  第几条 到第几条?
	 * 第 $page 页，说明前面已经翻过$page-1页，每页是 $perpage条
	 * 所以：跳过了 ($page-1) * $perpage 条.
	 * 即，从  ($page-1) * $perpage+1 条 开始取， 取$perpage 条出来
	 *
	 * 
	 * 分页导航的生成
	 * @exp 
	 * category.php?cat_id=3&page=1
	 * 
	 * 存在可能情况
	 * 1. category.php
	 * 2. category.php?cat_id=2
	 * 3. category.php?page=1 
	 * 
	 * 需要小心保护参数
	 * 分页导航中:
	 * [1] [2] 3 [4] [5] 
	 * page参数 应该根据当前的页码来生成，但同时不能把其它参数弄丢，如$cat_id
	 * 
	 * 
	 * 所以，需要先把地址栏的参数获取，并保存起来.(防止丢失)
	 * 
	 * 
	 * 1. 保存参数
	 * 2. 计算导航链接
	 */
```

# 编辑器 UEditor

```
<pre>
	编辑器步骤
	1： 如何引入
		下载
		获取文件
		script 载入文件
		配置文件
		
	2： 如何个性化配置
		* 可以修改底层配置文件
		* 可以修改底层配置文件中对象的某些项 (单独写一个自己的配置文件)
		* 可以修改底层配置文件中的options 传入 `new UE.ui.Editor()` 中
	
	var editor = new UE.ui.Editor();	
	editor.render('goods_desc');
	
	console.log( editor.getContentTxt() );  // 获取纯文本
	console.log( editor.getPlainTxt() ); // 获取

	3： 如何与自己的系统整合
		
	载入文件
	修改匹配系统的样式
	修改配置文件，达到符合自己的需求
</pre>
```
